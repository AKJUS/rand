// Copyright 2018 Developers of the Rand project.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

//! The standard RNG

use rand_core::{CryptoRng, RngCore, SeedableRng};

#[cfg(any(test, feature = "os_rng"))]
pub(crate) use rand_chacha::ChaCha12Core as Core;

use rand_chacha::ChaCha12Rng as Rng;

/// A strong, fast (amortized), non-portable RNG
///
/// This is the "standard" RNG, a generator with the following properties:
///
/// - Non-[portable]: any future library version may replace the algorithm
///   and results may be platform-dependent.
///   (For a portable version, use the [rand_chacha] crate directly.)
/// - [CSPRNG]: statistically good quality of randomness and [unpredictable]
/// - Fast ([amortized](https://en.wikipedia.org/wiki/Amortized_analysis)):
///   the RNG is fast for bulk generation, but the cost of method calls is not
///   consistent due to usage of an output buffer.
///
/// The current algorithm used is the ChaCha block cipher with 12 rounds. Please
/// see this relevant [rand issue] for the discussion. This may change as new
/// evidence of cipher security and performance becomes available.
///
/// ## Seeding (construction)
///
/// This generator implements the [`SeedableRng`] trait. Any method may be used,
/// but note that `seed_from_u64` is not suitable for usage where security is
/// important. Also note that, even with a fixed seed, output is not [portable].
///
/// Using a fresh seed **direct from the OS** is the most secure option:
/// ```
/// # use rand::{SeedableRng, rngs::StdRng};
/// let rng = StdRng::from_os_rng();
/// # let _: StdRng = rng;
/// ```
///
/// Seeding via [`rand::rng()`](crate::rng()) may be faster:
/// ```
/// # use rand::{SeedableRng, rngs::StdRng};
/// let rng = StdRng::from_rng(&mut rand::rng());
/// # let _: StdRng = rng;
/// ```
///
/// Any [`SeedableRng`] method may be used, but note that `seed_from_u64` is not
/// suitable where security is required. See also [Seeding RNGs] in the book.
///
/// ## Generation
///
/// The generators implements [`RngCore`] and thus also [`Rng`][crate::Rng].
/// See also the [Random Values] chapter in the book.
///
/// [portable]: https://rust-random.github.io/book/crate-reprod.html
/// [Seeding RNGs]: https://rust-random.github.io/book/guide-seeding.html
/// [unpredictable]: https://rust-random.github.io/book/guide-rngs.html#security
/// [Random Values]: https://rust-random.github.io/book/guide-values.html
/// [CSPRNG]: https://rust-random.github.io/book/guide-gen.html#cryptographically-secure-pseudo-random-number-generator
/// [rand_chacha]: https://crates.io/crates/rand_chacha
/// [rand issue]: https://github.com/rust-random/rand/issues/932
#[derive(Clone, Debug, PartialEq, Eq)]
pub struct StdRng(Rng);

impl RngCore for StdRng {
    #[inline(always)]
    fn next_u32(&mut self) -> u32 {
        self.0.next_u32()
    }

    #[inline(always)]
    fn next_u64(&mut self) -> u64 {
        self.0.next_u64()
    }

    #[inline(always)]
    fn fill_bytes(&mut self, dst: &mut [u8]) {
        self.0.fill_bytes(dst)
    }
}

impl SeedableRng for StdRng {
    // Fix to 256 bits. Changing this is a breaking change!
    type Seed = [u8; 32];

    #[inline(always)]
    fn from_seed(seed: Self::Seed) -> Self {
        StdRng(Rng::from_seed(seed))
    }
}

impl CryptoRng for StdRng {}

#[cfg(test)]
mod test {
    use crate::rngs::StdRng;
    use crate::{RngCore, SeedableRng};

    #[test]
    fn test_stdrng_construction() {
        // Test value-stability of StdRng. This is expected to break any time
        // the algorithm is changed.
        #[rustfmt::skip]
        let seed = [1,0,0,0, 23,0,0,0, 200,1,0,0, 210,30,0,0,
                    0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0];

        let target = [10719222850664546238, 14064965282130556830];

        let mut rng0 = StdRng::from_seed(seed);

        let x0 = rng0.next_u64();

        let mut rng1 = StdRng::from_rng(&mut rng0);
        let x1 = rng1.next_u64();

        assert_eq!([x0, x1], target);
    }

    #[test]
    fn test_chacha_true_values_1() {
        // Source: Test Vectors for the Stream Cipher ChaCha
        // draft-strombergson-chacha-test-vectors-01
        // https://datatracker.ietf.org/doc/html/draft-strombergson-chacha-test-vectors-01
        // TC: all zero key and IV, rounds 12, 256-bit key

        let seed = [0u8; 32];
        let mut rng = StdRng::from_seed(seed);

        let mut results = [0u8; 64];
        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0x9b, 0xf4, 0x9a, 0x6a, 0x07, 0x55, 0xf9, 0x53,
            0x81, 0x1f, 0xce, 0x12, 0x5f, 0x26, 0x83, 0xd5,
            0x04, 0x29, 0xc3, 0xbb, 0x49, 0xe0, 0x74, 0x14,
            0x7e, 0x00, 0x89, 0xa5, 0x2e, 0xae, 0x15, 0x5f,
            0x05, 0x64, 0xf8, 0x79, 0xd2, 0x7a, 0xe3, 0xc0,
            0x2c, 0xe8, 0x28, 0x34, 0xac, 0xfa, 0x8c, 0x79,
            0x3a, 0x62, 0x9f, 0x2c, 0xa0, 0xde, 0x69, 0x19,
            0x61, 0x0b, 0xe8, 0x2f, 0x41, 0x13, 0x26, 0xbe,
        ];
        assert_eq!(results, expected);

        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0x0b, 0xd5, 0x88, 0x41, 0x20, 0x3e, 0x74, 0xfe,
            0x86, 0xfc, 0x71, 0x33, 0x8c, 0xe0, 0x17, 0x3d,
            0xc6, 0x28, 0xeb, 0xb7, 0x19, 0xbd, 0xcb, 0xcc,
            0x15, 0x15, 0x85, 0x21, 0x4c, 0xc0, 0x89, 0xb4,
            0x42, 0x25, 0x8d, 0xcd, 0xa1, 0x4c, 0xf1, 0x11,
            0xc6, 0x02, 0xb8, 0x97, 0x1b, 0x8c, 0xc8, 0x43,
            0xe9, 0x1e, 0x46, 0xca, 0x90, 0x51, 0x51, 0xc0,
            0x27, 0x44, 0xa6, 0xb0, 0x17, 0xe6, 0x93, 0x16,
        ];
        assert_eq!(results, expected);

        assert_eq!(rng.0.get_word_pos(), 32);
    }

    #[test]
    fn test_chacha_true_values_2() {
        // Source: Test Vectors for the Stream Cipher ChaCha
        // draft-strombergson-chacha-test-vectors-01
        // https://datatracker.ietf.org/doc/html/draft-strombergson-chacha-test-vectors-01
        // TC2: single bit set in key, all zero IV, rounds 12, 256-bit key

        let mut seed = [0u8; 32];
        seed[0] = 1;
        let mut rng = StdRng::from_seed(seed);

        let mut results = [0u8; 64];
        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0x12, 0x05, 0x6e, 0x59, 0x5d, 0x56, 0xb0, 0xf6,
            0xee, 0xf0, 0x90, 0xf0, 0xcd, 0x25, 0xa2, 0x09,
            0x49, 0x24, 0x8c, 0x27, 0x90, 0x52, 0x5d, 0x0f,
            0x93, 0x02, 0x18, 0xff, 0x0b, 0x4d, 0xdd, 0x10,
            0xa6, 0x00, 0x22, 0x39, 0xd9, 0xa4, 0x54, 0xe2,
            0x9e, 0x10, 0x7a, 0x7d, 0x06, 0xfe, 0xfd, 0xfe,
            0xf0, 0x21, 0x0f, 0xeb, 0xa0, 0x44, 0xf9, 0xf2,
            0x9b, 0x17, 0x72, 0xc9, 0x60, 0xdc, 0x29, 0xc0,
        ];
        assert_eq!(results, expected);

        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0x0c, 0x73, 0x66, 0xc5, 0xcb, 0xc6, 0x04, 0x24,
            0x0e, 0x66, 0x5e, 0xb0, 0x2a, 0x69, 0x37, 0x2a,
            0x7a, 0xf9, 0x79, 0xb2, 0x6f, 0xbb, 0x78, 0x09,
            0x2a, 0xc7, 0xc4, 0xb8, 0x80, 0x29, 0xa7, 0xc8,
            0x54, 0x51, 0x3b, 0xc2, 0x17, 0xbb, 0xfc, 0x7d,
            0x90, 0x43, 0x2e, 0x30, 0x8e, 0xba, 0x15, 0xaf,
            0xc6, 0x5a, 0xeb, 0x48, 0xef, 0x10, 0x0d, 0x56,
            0x01, 0xe6, 0xaf, 0xba, 0x25, 0x71, 0x17, 0xa9,
        ];
        assert_eq!(results, expected);

        assert_eq!(rng.0.get_word_pos(), 32);
    }

    #[test]
    fn test_chacha_true_values_3() {
        // Source: Test Vectors for the Stream Cipher ChaCha
        // draft-strombergson-chacha-test-vectors-01
        // https://datatracker.ietf.org/doc/html/draft-strombergson-chacha-test-vectors-01
        // TC3: all zero key, single bit set in IV, rounds 12, 256-bit key

        let seed = [0u8; 32];
        let mut rng = StdRng::from_seed(seed);
        rng.0.set_stream(1);

        let mut results = [0u8; 64];
        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0x64, 0xb8, 0xbd, 0xf8, 0x7b, 0x82, 0x8c, 0x4b,
            0x6d, 0xba, 0xf7, 0xef, 0x69, 0x8d, 0xe0, 0x3d,
            0xf8, 0xb3, 0x3f, 0x63, 0x57, 0x14, 0x41, 0x8f,
            0x98, 0x36, 0xad, 0xe5, 0x9b, 0xe1, 0x29, 0x69,
            0x46, 0xc9, 0x53, 0xa0, 0xf3, 0x8e, 0xcf, 0xfc,
            0x9e, 0xcb, 0x98, 0xe8, 0x1d, 0x5d, 0x99, 0xa5,
            0xed, 0xfc, 0x8f, 0x9a, 0x0a, 0x45, 0xb9, 0xe4,
            0x1e, 0xf3, 0xb3, 0x1f, 0x02, 0x8f, 0x1d, 0x0f,
        ];
        assert_eq!(results, expected);

        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0x55, 0x9d, 0xb4, 0xa7, 0xf2, 0x22, 0xc4, 0x42,
            0xfe, 0x23, 0xb9, 0xa2, 0x59, 0x6a, 0x88, 0x28,
            0x51, 0x22, 0xee, 0x4f, 0x13, 0x63, 0x89, 0x6e,
            0xa7, 0x7c, 0xa1, 0x50, 0x91, 0x2a, 0xc7, 0x23,
            0xbf, 0xf0, 0x4b, 0x02, 0x6a, 0x2f, 0x80, 0x7e,
            0x03, 0xb2, 0x9c, 0x02, 0x07, 0x7d, 0x7b, 0x06,
            0xfc, 0x1a, 0xb9, 0x82, 0x7c, 0x13, 0xc8, 0x01,
            0x3a, 0x6d, 0x83, 0xbd, 0x3b, 0x52, 0xa2, 0x6f,
        ];
        assert_eq!(results, expected);

        assert_eq!(rng.0.get_word_pos(), 32);
    }

    #[test]
    fn test_chacha_true_values_8() {
        // Source: Test Vectors for the Stream Cipher ChaCha
        // draft-strombergson-chacha-test-vectors-01
        // https://datatracker.ietf.org/doc/html/draft-strombergson-chacha-test-vectors-01
        // TC8: key: 'All your base are belong to us!', IV: IETF2013, rounds 12, 256-bit key

        #[rustfmt::skip]
        let seed = [
            0xc4, 0x6e, 0xc1, 0xb1, 0x8c, 0xe8, 0xa8, 0x78,
            0x72, 0x5a, 0x37, 0xe7, 0x80, 0xdf, 0xb7, 0x35,
            0x1f, 0x68, 0xed, 0x2e, 0x19, 0x4c, 0x79, 0xfb,
            0xc6, 0xae, 0xbe, 0xe1, 0xa6, 0x67, 0x97, 0x5d,
        ];
        let iv = [0x1a, 0xda, 0x31, 0xd5, 0xcf, 0x68, 0x82, 0x21];
        let mut rng = StdRng::from_seed(seed);
        rng.0.set_stream(u64::from_le_bytes(iv));

        let mut results = [0u8; 64];
        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0x14, 0x82, 0x07, 0x27, 0x84, 0xbc, 0x6d, 0x06,
            0xb4, 0xe7, 0x3b, 0xdc, 0x11, 0x8b, 0xc0, 0x10,
            0x3c, 0x79, 0x76, 0x78, 0x6c, 0xa9, 0x18, 0xe0,
            0x69, 0x86, 0xaa, 0x25, 0x1f, 0x7e, 0x9c, 0xc1,
            0xb2, 0x74, 0x9a, 0x0a, 0x16, 0xee, 0x83, 0xb4,
            0x24, 0x2d, 0x2e, 0x99, 0xb0, 0x8d, 0x7c, 0x20,
            0x09, 0x2b, 0x80, 0xbc, 0x46, 0x6c, 0x87, 0x28,
            0x3b, 0x61, 0xb1, 0xb3, 0x9d, 0x0f, 0xfb, 0xab,
        ];
        assert_eq!(results, expected);

        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0xd9, 0x4b, 0x11, 0x6b, 0xc1, 0xeb, 0xdb, 0x32,
            0x9b, 0x9e, 0x4f, 0x62, 0x0d, 0xb6, 0x95, 0x54,
            0x4a, 0x8e, 0x3d, 0x9b, 0x68, 0x47, 0x3d, 0x0c,
            0x97, 0x5a, 0x46, 0xad, 0x96, 0x6e, 0xd6, 0x31,
            0xe4, 0x2a, 0xff, 0x53, 0x0a, 0xd5, 0xea, 0xc7,
            0xd8, 0x04, 0x7a, 0xdf, 0xa1, 0xe5, 0x11, 0x3c,
            0x91, 0xf3, 0xe3, 0xb8, 0x83, 0xf1, 0xd1, 0x89,
            0xac, 0x1c, 0x8f, 0xe0, 0x7b, 0xa5, 0xa4, 0x2b,
        ];
        assert_eq!(results, expected);

        assert_eq!(rng.0.get_word_pos(), 32);
    }

    #[test]
    fn test_chacha_counter() {
        // Source: none
        // Test: all zero key and IV, block set to u32::MAX, rounds 12, 256-bit key

        let seed = [0u8; 32];
        let mut rng = StdRng::from_seed(seed);
        let block = u32::MAX;
        let words_per_block = 16;
        rng.0.set_word_pos((block as u128) * words_per_block);

        let mut results = [0u8; 64];
        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0xd7, 0xa6, 0xaf, 0x50, 0xf1, 0xc9, 0x2a, 0x29,
            0x48, 0x42, 0x52, 0xbb, 0xfc, 0xe2, 0x06, 0xf1,
            0x7d, 0x01, 0xdd, 0x13, 0x95, 0x30, 0xa3, 0x83,
            0x0a, 0xb5, 0x83, 0xc1, 0xf6, 0x2e, 0x03, 0x12,
            0x82, 0x93, 0x61, 0xa1, 0x9a, 0x8a, 0x95, 0x6c,
            0xed, 0xea, 0x38, 0x04, 0x30, 0xff, 0x93, 0x2c,
            0xd0, 0x52, 0xdb, 0x5e, 0x94, 0x77, 0x83, 0x50,
            0x58, 0xb8, 0x0a, 0x27, 0x24, 0x06, 0xfc, 0x74,
        ];
        assert_eq!(results, expected);

        rng.fill_bytes(&mut results);
        #[rustfmt::skip]
        let expected = [
            0xcc, 0x7b, 0x53, 0xdc, 0x11, 0x89, 0x4d, 0x26,
            0x24, 0x05, 0x81, 0xb8, 0xa8, 0xf4, 0xf4, 0xe5,
            0xaf, 0x40, 0x67, 0x05, 0x80, 0x12, 0x23, 0xb1,
            0x3f, 0x82, 0x1f, 0xdc, 0xcb, 0xa6, 0xa6, 0x18,
            0x8a, 0x63, 0xf8, 0xd3, 0xdc, 0x83, 0xcc, 0xbc,
            0xed, 0x45, 0x1f, 0x4b, 0xa4, 0xe0, 0xda, 0xab,
            0x22, 0x8a, 0xbb, 0x0d, 0x74, 0x39, 0xcc, 0x67,
            0xe5, 0x0d, 0xf7, 0x12, 0x9f, 0x64, 0x6b, 0xad,
        ];
        assert_eq!(results, expected);

        assert_eq!(rng.0.get_word_pos(), (block as u128) * words_per_block + 32);
    }
}
